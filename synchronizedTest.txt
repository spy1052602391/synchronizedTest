class Print{
    private int flag = 1;
    private int count = 0;
    StringBuffer str = new StringBuffer("");
    public int getCount() {
        return count;
    }

    public synchronized void printA(){
        while(flag != 1){
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println(str.append("*"+Thread.currentThread().getName()));
        flag = 2;
        count++;
        notifyAll();
    }
    public synchronized void printB(){
        while(flag != 2){
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println(str.append("@"+Thread.currentThread().getName()));
        flag = 3;
        count++;
        notifyAll();
    }
    public synchronized void printC(){
        while(flag != 3){
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println(str.append("#"+Thread.currentThread().getName()));
        count++;
        flag = 1;
        notifyAll();
    }
}

class MyThread implements Runnable{
    private Print print;
    private int flag;

    public MyThread(Print print, int flag) {
        this.print = print;
        this.flag = flag;
    }

    @Override
    public void run() {
        while(print.getCount() < 30) {
            if (this.flag == 1) {
                print.printA();
            } else if (this.flag == 2) {
                print.printB();
            } else if (this.flag == 3) {
                print.printC();
            }
        }
    }
}

public class Test {
    public static void main(String[] args) {
        Print print = new Print();
        MyThread myThread1 = new MyThread(print,1);
        MyThread myThread2 = new MyThread(print,2);
        MyThread myThread3 = new MyThread(print,3);
        Thread thread1 = new Thread(myThread1);
        Thread thread2 = new Thread(myThread2);
        Thread thread3 = new Thread(myThread3);
        thread1.start();
        thread2.start();
        thread3.start();
    }
}